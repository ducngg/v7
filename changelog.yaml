changes:
  - timestamp: '2024-02-27 10:05 AM'
    research: 'Structure of a word in Vietnamese language'
    change: ''
    description: ''
  - timestamp: '2024-02-27 9:52 PM'
    research: ''
    change: 'Done function Vietname.CRT to seperate a Vietnamese word to its Consonant, Rhyme family, and Tone'
    description: ''
  - timestamp: '2024-02-28 3:53 PM'
    research: ''
    change: ''
    description: 'Add rare rhymes/words: _oeo, giua, _uênh, giêng, p_'
  - timestamp: '2024-02-29 1:12 PM'
    research: 'Discover blank language model'
    change: ''
    description: ''
  - timestamp: '2024-03-02 1:11 PM'
    research: ''
    change: ''
    description: 'Start building `synthesize(c,r,t)->w`(this is reverse of analyze(w)->c,r,t): From consonant family, rhyme family, tone to a Vietnamese word'
  - timestamp: '2024-03-02 9:22 PM'
    research: ''
    change: 'Fix some rhyme, add all rare rhymes and combinations, checked all diacritic positions in a rhyme'
    description: 'Finished `synthesize()`'
  - timestamp: '2024-03-03 1:36 PM'
    research: ''
    change: 'Add recognize of `quớt`'
    description: ''
  - timestamp: '2024-03-03 5:17 PM'
    research: ''
    change: 'Add `y` counterparts for consonants like t, v, s... + `i` -> [`ti`, `ty`]'
    description: ''
  - timestamp: '2024-06-03 9:58 AM'
    research: 'pynput research'
    change: ''
    description: 'pynput trash af'
  - timestamp: '2024-06-03 8:09 PM'
    research: 'PhoBERT research, frequency analysis'
    change: 'Done frequency records from 100.000.000+ words in corpus-title.txt, stored in db.json, can be access by import vietnamese, can be update by run python vietnamese'
    description: 'not yet implement models'
  - timestamp: '2024-06-03 10:11 PM'
    research: ''
    change: 'Done primitive dictionary from vn.dict.yaml file'
    description: ''
  - timestamp: '2024-11-03 9:05 AM'
    research: ''
    change: 'Make InputMethod class and an app for typing'
    description: ''
  - timestamp: '2024-16-03 16:12 PM'
    research: 'TODO: will research for faster typing like {mj -> manh / minh, ty -> toi, tai, tui...} and If vowel is not wildcard -> must be exact match: cho1 -> chó/chớ/chố instead of showing chóng/chớm...'
    change: 'Add rhyme recognizer, fixed a lot of bugs when add this feature. Seperate vietnamese.py to vietnamese.py, dictionary.py, and inputmethod.py'
    description: 'Remove null consonant `hh`, and method in InputMethod'
  - timestamp: '2024-17-03 10:29 AM'
    research: 'TODO/: will research the optimal param max on Case 4. (SOLVED 2024-21-03 00:00 AM - Arrow key to switch page feature)'
    change: 'Improve rhyme recognizer and InputMethod.predict() by a lot, 4 cases of raw input are handled perfectly! And change a little bit in some Dictionary functions.'
    description: 'Seperate InputMethod.parse() to 2 functions, this will helpful in Case 2 of the InputMethod.predict().'
  - timestamp: '2024-17-03 18:59 PM'
    research: '`p4` problem: The only combination that has no words in db(freq=0). -> Solution: Hardcode db.json {`pã`: 10}'
    change: 'Add a lot more documentations on README.md'
    description: 'TODO/: `quồng` problem havent been solved yet (SOLVED 2024-20-03 17:15 PM)'
  - timestamp: '2024-20-03 17:15 PM'
    research: 'TODO/: make testing functions, test time performance and result <No need anymore 2024-18-09 3:21 AM>'
    change: 'Now user can input entering final consonants (`-c` for `-ng`...), add flexible_k configuration: set to False so when you type `c`, `k`, or `q`, it just predict the words that start with that consonant.'
    description: 'InputMethod.predict() now use InputMethod.get() instead of Dictionary.get(). Fix some issues with these changes.'
  - timestamp: '2024-21-03 00:00 AM'
    research: 'Identify and fix issue when flexible_k goes with CASE 4'
    change: 'HUGE update app.py for more reusable code, backspace now delete just one term instead of all.'
    description: 'DONE paging feature to access more than 9 words'
  - timestamp: '2024-22-03 11:07 AM'
    research: ''
    change: 'change a lot interface app.py'
    description: ''
  - timestamp: '2024-22-03 18:49 PM'
    research: 'compare telex vni vs v7, result in README.md and testlog.txt(private)'
    change: ''
    description: ''
  - timestamp: '2024-24-03 2:46 AM'
    research: 'TODO: -> needs to update comparing script with original input methods because of null consonant and end_of_rhyme'
    change: 'brings back null consonant, add end_of_rhyme=`h`, add session history'
    description: 'Dictionary.get() now accept `any` as a rhyme for all rhymes possible. `end_of_rhyme` is for force ending the rhyme. example: `co5ve4tr0` cannot yields `cọ vẽ tranh`, and it`s impossible to type `cọ vẽ tranh` using CASE 4 typing. `end_of_rhyme` is created to fix this: `coh5ve4tr0` (actually I cannot type dumemay because same thing happens to ddu5)'
  - timestamp: '2024-24-03 2:16 PM'
    research: 'change `end_of_rhyme` to `.` because `h` is conflict with `-nh` rhyme'
    change: ''
    description: ''
  - timestamp: '2024-24-03 8:13 PM'
    research: 'research hidden markov model for integrating'
    change: ''
    description: ''
  - timestamp: '2024-26-03 11:24 AM'
    research: 'process on 30gb news dataset on db.json: 165062768 lines, 4674747545/5035111054 words processed'
    change: ''
    description: ''
  - timestamp: '2024-31-03 11:22 AM'
    research: 'TODO/: rearrange result from Dictionary.predict() <No need anymore 2024-18-09 3:21 AM>'
    change: ''
    description: ''
  - timestamp: '2024-19-05 8:12 AM'
    research: 'TODO/: Each time user choose a combination, the app will notify how much faster compared with traditional method. (SOLVED 2024-02-06 6:31 PM)'
    change: 'refactor code in dictionary.py, tiny change in inputmethod.py'
    description: 'app.py: develop a feature that let user add their own phrases'
  - timestamp: '2024-30-05 1:08 PM'
    research: 'FIX: disallow combination between `z` and `ên`'
    change: 'app.py: now user just can add phrase if it is Vietnamese'
    description: 'use overview.py to see total distinct words/sounds in Vietnamese' 
  - timestamp: '2024-01-06 5:39 AM'
    research: ''
    change: ''
    description: 'Show %key reduced each time user choose a combination' 
  - timestamp: '2024-06-06 5:27 PM'
    research: ''
    change: ''
    description: 'fix design on app, add Vietnamese option to app' 
  - timestamp: '2024-24-06 10:36 PM'
    research: 'add enum.json for enumerating words for deep learning language model kick off'
    change: 'Now vocab = 17788 (and then +1 for the padding token)'
    description: 'fix vietnamese.py words_with_tones functions just accept z with rhymes_families_with_gi'
# Multiple researches / experiments on CNN / LSTM / Transformer models
# max_sequence_len is set to be 15 -> 6 -> 8
# need a light weight model, transformer -> CNNLSTM
# remove frequent words, resample dataset 
  - timestamp: '2024-10-08 11:00 PM'
    research: 'previously not choose transformer because don’t know how to use. But now I understand how transformer works. Use transformer architecture to train. Learn to prepare data the hard way. -> Finally I can integrate AI to v7.'
    change: ''
    description: 'First version: `v7-0.1.pth` train on 8M sequences'
  - timestamp: '2024-12-08 3:33 PM'
    research: ''
    change: 'Create `ai` folder/module to support model usage'
    description: 'Move Kaggle notebook code to `ai` folder, will integrate trained model to app'
  - timestamp: '2024-12-08 3:33 PM'
    research: ''
    change: 'Create `ai` folder/module to support model usage'
    description: 'Move Kaggle notebook code to `ai` folder, will integrate trained model to app'
  - timestamp: '2024-22-08 2:01 PM'
    research: 'Works good with GPT model of Karpathy!!!!!!! Very good!!!!!!'
    change: 'Change ai/utils.py'
    description: 'Karpathy reproduce GPT2: https://youtu.be/l8pRSuU81PU?si=jQsbKvsdUa3LXqyw&t=1920, Successfully reproduced a lightweight, CPU-friendly Vietnamese language model optimized for next word prediction, leveraging a custom single Vietnamese word tokenizer developed during language analysis. Integrated this model into the input method to significantly enhance typing speed and accuracy, providing a sophisticated, context-aware typing experience.'
  - timestamp: '2024-31-08 10:00 PM'
    research: 'TODO: when input a long sentence, may predict the first 1 or 2 most confidence next words first. TODO/: make cache for AI (SOLVED 2024-01-10 10:50 PM)'
    change: 'Make AIInputMethod, HUGE Refactor codebase. TODO/: use pydantic models (SOLVED 2024-10-09 10:52 AM)'
    description: 'Create smaller subfolders'
  - timestamp: '2024-02-09 2:04 PM'
    research: ''
    change: 'Update docs for public to socal media, support VNI 6 tones system for AI mode'
    description: 'Happy Vietnam Independence day!'
  - timestamp: '2024-10-09 10:52 AM'
    research: 'May cost from 5% to 10% more time'
    change: 'Use typing and pydantic models to make the code more readable, add AI.md'
    description: 'On branch `typing`. TODO/: In dictionary mode, `que0` in branch `main` dont have quê, and `que0` in branch `typing` does not result in anything! (SOLVED 2024-12-09 11:32 PM)'
  - timestamp: '2024-12-09 11:32 PM'
    research: 'quin/quịt, qui/quí still can be recognized as a Vietnamese word (see Vietnamese.analyze), but you cannot type quin/quịt, qui/quí in v7. (see Vietnamese.synthesize)'
    change: 'Remove `flexible_k` since no one will need that feature anyway. Rename `flexible_tones` to `vni_tones`. (self.flexible_k = flexible_k # Only works is strict_k is False: flexible_k helps `q`, `c`, and `k` yields the same predicted words. Set to False so when you type `c`, `k`, or `q`, it just predict the words that start with that consonant.'
    description: 'Support distinct k, q, c in AI mode. Handle `quen0` problem where it just show `quen`, does not show `quên`. More general: `uê*`-`oe*` and `uâ*`-`oa*` problem'
  - timestamp: '2024-13-09 11:19 AM'
    research: ''
    change: 'Add singleton to tokenizer, update docs, rename some utils files'
    description: 'Refactor codebase: move vietnamese.py, dictionary.py... to utils/'
  - timestamp: '2024-18-09 3:21 AM'
    research: 'Buffer for AI, and use Cmd/Ctrl+Position for changing top predicted word or something. Greatly improve performance'
    change: 'Update README, change the behaviour of input event when typing'
    description: 'HUGE FRONT-END IMPROVEMENTS'
  - timestamp: '2024-03-10 10:10 PM'
    research: ''
    change: ''
    description: 'Make a simple logo, enable minimalism mode'
  - timestamp: '2024-10-10 10:18 AM'
    research: 'GET READY FOR INTEGRATED KEYBOARD'
    change: 'css styles will be in assets'
    description: 'Enable size config'
  - timestamp: '2024-12-10 7:33 PM'
    research:
      - listen-to-global-keys: "Use `pynput.keyboard` library"
      - put-predicted-words-to-typing-area: "Use `pyautogui` and `pyperclip` library (which are using clipboard). TODO/: not relying on clipboard(Solved: using pynput.keyboard)"
      - tracking-context: "Currently just support adding context, deleted words may not be tracked. TODO: Do it!"
      - cancle-typing-on-text-area-while-predicting: "Currently use backspace before emit because cannot intervene to the os. TODO: Research about it"
      - open-an-interface-below:
        - locate-caret-area: "Not yet, the position will be temporarily fixed. May using AppKit. TODO: Do it!"
        - create-an-app-below: "Use Qt5"
    change: 'v7 can now be a simple, not robust yet, integrated keyboard. USE EVERYWHERE'
    description: 'Make show/hide UI shortcut, quit process (only macos). TODO: Cross platform'
  - timestamp: '2024-31-10 2:06 PM'
    research: ''
    change: 'refactor code'
    description: 'args parser function, more generic AI functions for future bigger models. TODO: video present gui'
  - timestamp: '2024-01-11 3:53 PM'
    research: 'TODO: change page size from 9 to lower when the predictions are too long, and move app self.ready to prediction_state'
    change: 'Move further readings in README.md to READMORE.md, add help shortcut key combination instead of button, improve gui'
    description: 'Improve GUI as clean as possible, change prediction font to `Monaco`.'
  - timestamp: '2025-12-01 5:07 PM'
    research: 'New dataset: `VTSNLP/vietnamese_curated_dataset`. Add attention mask to mask completely the padding token. Train a model `v7gpt-1.1.pth` -> `v7gpt-1.3.pth` (more details in dict of pth file)'
    change: 'Little bit of app behaviour change for the CURRENT_KEYS problem'
    description: 'Change get_model pth file dict keys name'
  - timestamp: '2025-23-03 3:17 PM'
    research: ''
    change: 'Change handling special modifiers, and reduce error of Keyboard Listener thread'
    description: 'Better typing experience, from now will not give extra space after predictions. Add youtube video demo!'
  - timestamp: '2025-31-03 00:38 AM'
    research: ''
    change: 'Add basic Windows key combinations, listener fix for Windows'
  - timestamp: '2025-04-04 18:09 PM'
    research: ''
    change: 'Update opacity when idle and PREV/NEXT page key for Windows'
    description: 'UI Feature for Windows'
  - timestamp: '2025-10-04 11:48 AM'
    research: ''
    change: 'Change some key combinantions and gui logic for better typing experience.'
    description: 'Better UX, warm up UI at start'
  - timestamp: '2025-30-04 11:00 AM'
    research: 'xe tăng húc vào IJCAI'
    change: 'better listener, event handling'
    description: 'minor feature for better typing experience, improve docs and helpers'
  - timestamp: '2025-13-05 09:26 AM'
    research: 'better UX, minor AI fix'
    change: 'add LICENSE, logo, preprint'
    description: 'change 6/8 tone mode easily, movable gui window'
  - timestamp: ''
    change: 'Move training code from Kaggle `smallgpt-vietnamese` notebook to this repo'    
  